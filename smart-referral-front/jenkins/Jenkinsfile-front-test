node {
    //=======================健康管理测试环境前端项目脚本======================= 
    def build_info = "健康管理智能转诊前端测试环境，选择的分支为：${branch}；选择的项目为：${selected_projects}；"
	if ("${build_only}" == "true") {
		build_info = "${build_info}, 仅制作镜像！"
	}
    echo "${build_info}"
    //企业微信机器人 id 
    def hook_id = "5f83688e-e4d2-4d1e-8c72-6ef2978d4e44"
    def user_name = "未知用户"
    wrap([$class: 'BuildUser']) {
        //获取当前登录用户名
        user_name = env.BUILD_USER
    }
    def remind_info = "${user_name}发起了一次更新（${BUILD_DISPLAY_NAME}）：${build_info}"
    //调用脚本推送企业微信消息
    sh "sudo /home/ucmed/jenkins-script/wxRemind.sh ${hook_id} ${remind_info}"

    try {
        //gitlab凭证 
        def git_auth = "yuanfei-git"
        //gitlab地址  
        def git_url = "http://yuanfei@192.168.0.116/zjhm/smart-referral-front.git"
        //打包命令选项（不同环境需修改）
        //def build_tag = ""
        //镜像版本（不同环境需修改）
        def docker_tag = "env-test"
        //harbor地址
        def harbor_url = "registry.zwjk.com"
        //harbor上的项目目录
        def harbor_project_name = "misd"
        //harbor凭证
        def harbor_auth = "gcp_harbor_auth"
        //SSH Server（不同环境需修改）
        def remote_server = "192.168.3.193"
        //远程服务器上执行脚本（不同环境需修改）
        def remote_exec = "/home/ucmed/referral-sh/front/vue.sh"
        def project_list = selected_projects.split(',')
        stage('拉取代码') { // for display purposes
            echo "从git拉取代码"
            // 删除根目录下所有文件
            //sh "rm -rf ./*"
            // 拉取产品化代码
            checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], extensions: [], userRemoteConfigs: [[credentialsId: "${git_auth}", url: "${git_url}"]]])
        }
        stage('打包、构建镜像') {
            def imageName = "referral-web:${docker_tag}"
            nodejs('NodeJS16') {
				for (int i=0; i < project_list.size(); i ++) {
					def project_name = project_list[i]
					if ("$project_name" == "") {
						continue
					}
					echo "开始打包${project_name}"
					if ("${npm_install}" == "true") {
						sh "cd  ${project_name} && npm install --registry=https://registry.npmmirror.com && npm install crypto-js --save-dev --registry=https://registry.npmmirror.com"
					} else {
						echo "npm install已跳过！！！"
					}
					sh "cd ${project_name} && npm run build"
				}
            }
            echo "开始制作镜像"
            sh "sudo docker build . -t ${imageName}"
            sh "sudo docker tag ${imageName} ${harbor_url}/${harbor_project_name}/${imageName}"
            withCredentials([usernamePassword(credentialsId: "${harbor_auth}", passwordVariable: 'password', usernameVariable: 'username')]) {
                echo "登录并上传镜像"
                sh "sudo docker login --username=${username} ${harbor_url} --password=${password}"
                sh "sudo docker push ${harbor_url}/${harbor_project_name}/${imageName}"
            }
            echo "删除本地镜像"
            sh "sudo docker rmi ${imageName}"
            sh "sudo docker rmi ${harbor_url}/${harbor_project_name}/${imageName}"
        }
        stage('部署代码') {
			if ("${build_only}" == "false") {
				echo "开始部署代码"
				sshPublisher(publishers: [
					sshPublisherDesc(configName: "${remote_server}", 
					transfers: [
						sshTransfer(cleanRemote: false, 
						excludes: '', 
						execCommand: "${remote_exec}", 
						execTimeout: 120000, 
						flatten: false, 
						makeEmptyDirs: false, 
						noDefaultExcludes: false, 
						patternSeparator: '[, ]+', 
						remoteDirectory: '', 
						remoteDirectorySDF: false, 
						removePrefix: '', 
						sourceFiles: '')
						], 
						usePromotionTimestamp: false, 
						useWorkspaceInPromotion: false, verbose: false)
						])
			} else {
				echo "部署代码已跳过！"
			}
        }
    } catch (Throwable e) {
      remind_info = "${user_name}发起的更新（${BUILD_DISPLAY_NAME}）失败！详见Jenkins日志"
      sh "sudo /home/ucmed/jenkins-script/wxRemind.sh ${wook_id} ${remind_info}"
      throw e
    }
    remind_info = "${user_name}发起的更新（${BUILD_DISPLAY_NAME}）已结束"
    //调用脚本推送企业微信消息
    sh "sudo /home/ucmed/jenkins-script/wxRemind.sh ${hook_id} ${remind_info}"

}
